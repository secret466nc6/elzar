# NOTE: this Swift-R takes no-simd (no_sse) native version as input
#       this hampers Swift-R a bit, but the comparison with AVX makes more sense

MKFILE_PATH := $(dir $(abspath $(lastword $(MAKEFILE_LIST))))
include $(MKFILE_PATH)/Makefile.common

UTILS := $(UTILS) $(MKFILE_PATH)/util/libc/build/native_nosse/libc-util.bc

# for final executable flags are with sse enabled...
FINALCCFLAGS := $(CCFLAGS) -mcpu=haswell -msse4.2
# ...but not for original files
CCFLAGS := $(CCFLAGS) -mno-avx -msse -fno-slp-vectorize -fno-vectorize

SWIFTR_RUNTIME  = $(SWIFTR_PATH)/runtime/swiftr.ll.checks-exit
SWIFTR_PASSFILE = $(SWIFTR_PATH)/pass/swiftr_pass.so
SWIFTR_PASSNAME = -sswiftr

all:: $(BUILDPATH)/$(NAME)

clean::
	rm -f $(BUILDPATH)/$(NAME) $(BUILDPATH)/$(NAME).linked.bc $(BUILDPATH)/$(NAME).renamed.bc $(BUILDPATH)/$(NAME).toswiftr.bc $(BUILDPATH)/$(NAME).noinline.bc $(BUILDPATH)/$(NAME).final.bc

# link all sources + utils
$(BUILDPATH)/$(NAME).linked.bc: $(addprefix $(BUILDPATH)/, $(LLS)) $(UTILS)
	$(LLVM_LINK) -o $@ $^

# substitute libc functions + inline
$(BUILDPATH)/$(NAME).renamed.bc: $(BUILDPATH)/$(NAME).linked.bc
	$(LLVM_OPT) -load $(RENAME_PASSFILE) $(RENAME_PASSNAME) -inline $^ -o $@

# link all sources-to-process + runtime
$(BUILDPATH)/$(NAME).toswiftr.bc: $(BUILDPATH)/$(NAME).renamed.bc $(SWIFTR_RUNTIME)
	$(LLVM_LINK) -o $@ $^

# swiftify-R
$(BUILDPATH)/$(NAME).final.bc: $(BUILDPATH)/$(NAME).toswiftr.bc
	$(LLVM_OPT) -load $(SWIFTR_PASSFILE) $(SWIFTR_PASSNAME) $(SWIFTR_PASS_FLAGS) $^ -o $(BUILDPATH)/$(NAME).noinline.bc
	$(LLVM_OPT) -always-inline $(BUILDPATH)/$(NAME).noinline.bc -o $@

# executable
$(BUILDPATH)/$(NAME): $(BUILDPATH)/$(NAME).final.bc $(addprefix $(BUILDPATH)/, $(LLS2))
	$(LLVM_CLANGPP) $(FINALCCFLAGS) -o $@ $^ -I $(INCLUDE_DIRS) -L $(LIB_DIRS) $(LIBS)

